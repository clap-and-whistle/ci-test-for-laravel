# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

version: 2
jobs:
  build:
    docker:
      - image: circleci/php:7.4.9-apache-buster

    steps:
      - checkout

      - run:
          name: setup using sqlite
          command: |
            sudo apt update
            sudo apt-get -y install git unzip libzip-dev libicu-dev libonig-dev zlib1g-dev sqlite3 libsqlite3-dev
            sudo docker-php-ext-install zip
            sudo docker-php-ext-install pdo_sqlite
            sudo docker-php-ext-enable pdo_sqlite

      - run:
          name: Install Node
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs

      # composer cache
      - restore_cache:
          keys:
            # "composer.json" can be used if "composer.json"
            # is not committed to the repository.
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare .env
      - run: mv .env.testing .env

      # prepare the database
      - run: touch ./database/database.sqlite
      - run: php artisan migrate --env=testing --force

  deploy:
    docker:
      - image: php:7.4.16-apache-buster

    steps:
      - run:
          name: setup basic packages
          command: |
            sudo apt update
            sudo apt-get -y install git unzip libzip-dev libicu-dev libonig-dev zlib1g-dev
            sudo docker-php-ext-install zip

      - run: echo "Hello World"

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              only: staging
      - deploy:
          requires:
            - build
